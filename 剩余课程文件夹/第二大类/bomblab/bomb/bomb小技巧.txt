linux的strings命令似乎可以查看二进制文件中的字符串，因此可以找出字符串中的特殊值。
整个实验目的是通过查看反汇编的汇编文件代码，推出原c函数，然后在./bomb中输入正确的字符串，解除炸弹。

理解方式：
1、直接看汇编码，转为c(看汇编码两种方式，一种在gdb中看，一种先反汇编，直接看bomb.s。gdb中看可以设置断点)
2、通过gdb进行调试，并且可以在<explode_bomb>出设置断点防止爆炸
3、直接用gdb，感觉现在gdb比cgdb好用，layout asm可以直接看汇编

gdb操作：
1、layout asm汇编界面，layout src源代码界面
2、b设置断点后，r启动（重启）程序，continue在b后继续执行。
3、n对应src的一行，stepi对应汇编一条指令。
4、gdb打开vim后，不能直接调整命令行。因此多次执行同一个命令可以按enter多次执行。
5.layout reg 可以查看寄存器的值
6.查看特定内存地址：x/4xb 0x603780
这里：

/4xb 参数告诉 gdb 显示从指定地址开始的4个单元（4）、以十六进制（x）格式、每个单元为一个字节（b）。
不同的格式字符代表不同的显示方式：

x - 十六进制
d - 十进制
u - 无符号十进制
o - 八进制
t - 二进制
a - 地址
c - 字符
f - 浮点数
s - 字符串
单位大小字符包括：

b - 字节（8位）
h - 半字（16位）
w - 字（32位）
g - 巨字（64位）

函数样例：
0000000000400ee0 <phase_1>:
  400ee0:	48 83 ec 08          	sub    $0x8,%rsp
  400ee4:	be 00 24 40 00       	mov    $0x402400,%esi
  400ee9:	e8 4a 04 00 00       	callq  401338 <strings_not_equal>
  400eee:	85 c0                	test   %eax,%eax
  400ef0:	74 05                	je     400ef7 <phase_1+0x17>
  400ef2:	e8 43 05 00 00       	callq  40143a <explode_bomb>
  400ef7:	48 83 c4 08          	add    $0x8,%rsp
  400efb:	c3                   	retq   
炸弹引爆样例：
  400ef2:	e8 43 05 00 00       	callq  40143a <explode_bomb>


通用寄存器：
r8 - r15：通用存放
rb,rc,rd:数据指针，计数器，数据寄存器
rs,rd:源地址，目的地址
特殊寄存器：
rsp：栈指针,rbp：栈地指针，某些情况（栈内动态大小内存）必须有
rax：返回值
rip：程序计数器，也就是程序运行到的地址
函数数据传输：
RDI, RSI, RDX, RCX, R8, 和 R9 寄存器作为前6个参数的寄存器
rax作为返回值。



实验详情：
phase1汇编码：
0000000000400ee0 <phase_1>:
  400ee0:	48 83 ec 08          	sub    $0x8,%rsp
  400ee4:	be 00 24 40 00       	mov    $0x402400,%esi
  400ee9:	e8 4a 04 00 00       	callq  401338 <strings_not_equal>
  400eee:	85 c0                	test   %eax,%eax
  400ef0:	74 05                	je     400ef7 <phase_1+0x17>
  400ef2:	e8 43 05 00 00       	callq  40143a <explode_bomb>
  400ef7:	48 83 c4 08          	add    $0x8,%rsp
  400efb:	c3                   	retq   
